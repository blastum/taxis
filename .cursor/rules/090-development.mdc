---
description: Development, build, deployment, and TypeScript quality rules
globs: ["**/*"]
alwaysApply: true
---
# Development and Deployment Rules

## Development Environment

### Setup Requirements
- **Node.js**: Required for npm dependencies
- **TypeScript**: Compiler with source maps
- **Python 3**: HTTP server for development (port 8000)
- **Browser**: Modern browser with ES modules support

### Development Commands
- **`npm install`**: Install dependencies
- **`npm run dev`**: Start TypeScript watch mode AND Python server
- **`npm run build`**: Compile TypeScript once
- **`npm run watch`**: Watch TypeScript files for changes
- **`npm run serve`**: Start Python HTTP server only

### Development Server Rules
- **Port**: Always use port 8000 for development
- **Server**: Python 3 HTTP server (`python -m http.server 8000`)
- **Rule**: Check for port conflicts before starting server
- **Rule**: Kill old servers if port 8000 is occupied

### Build Process Rules
- **Source Maps**: Always generate source maps for debugging
- **Output**: Compile to `dist/` directory
- **Rule**: Never commit compiled files to source control
- **Rule**: Exclude `*.js.map` files from repository

## File Structure Rules
```
src/                    # TypeScript source files
├── main.ts            # Application entry point
├── taxCalculator.ts   # Pure calculation logic
├── scenarioManager.ts # Data management
├── ui.ts             # User interface
└── types.ts          # Type definitions

dist/                  # Compiled JavaScript (generated)
docs/                  # Documentation
index.html            # Main HTML file
styles.css            # Application styling
```

## TypeScript Configuration Rules
- **Strict Mode**: Always use strict TypeScript settings
- **No Any Types**: Avoid `any` type usage
- **Type Safety**: Full type coverage required
- **Rule**: All functions must have proper type annotations
- **Rule**: Use interfaces for complex data structures

## GitHub Pages Deployment

### Deployment Process
- **Trigger**: Automatic deployment on push to `main` branch
- **Workflow**: `.github/workflows/deploy.yml`
- **Build Steps**: Install Node.js 18, compile TypeScript, deploy to Pages
- **Rule**: Never manually deploy, always use GitHub Actions

### Deployment Rules
- **Source**: GitHub Actions (not branch-based)
- **Build Output**: Entire project including `dist/` folder
- **Rule**: Build happens during deployment, not in source control
- **Rule**: Source maps excluded from production deployment

### Setup Requirements
- **GitHub Pages**: Must be enabled in repository settings
- **Source**: Set to "GitHub Actions"
- **Permissions**: Workflow needs Pages deployment permissions
- **Rule**: Verify deployment status in Actions tab

## Code Quality Rules

### TypeScript Standards
- **Rule**: Use strict TypeScript configuration
- **Rule**: All variables must be explicitly typed
- **Rule**: Use interfaces for object types
- **Rule**: Prefer `const` over `let` when possible
- **Rule**: Use arrow functions for callbacks

### Code Organization
- **Rule**: One component per file
- **Rule**: Clear separation of concerns
- **Rule**: Consistent naming conventions
- **Rule**: Proper import/export statements

### Error Handling
- **Rule**: Graceful error handling throughout application
- **Rule**: Never crash application due to user input
- **Rule**: Log errors for debugging
- **Rule**: Provide fallback behavior

## Testing Rules
- **Unit Tests**: Test individual components in isolation
- **Integration Tests**: Test component interactions
- **Tax Calculations**: Validate against known IRS examples
- **Rule**: Test edge cases and error conditions
- **Rule**: Test accessibility with keyboard navigation

## Performance Rules
- **Rule**: Minimize DOM manipulations
- **Rule**: Use efficient change detection
- **Rule**: Debounce rapid input changes
- **Rule**: Optimize for mobile devices
- **Rule**: Minimize bundle size

## Security Rules
- **Rule**: Sanitize all user input
- **Rule**: Validate data before processing
- **Rule**: Never trust localStorage data
- **Rule**: Use HTTPS in production
- **Rule**: Follow OWASP guidelines

## When Making Changes
- **Rule**: Test changes locally before committing
- **Rule**: Verify TypeScript compilation
- **Rule**: Check browser compatibility
- **Rule**: Test on mobile devices
- **Rule**: Verify deployment pipeline works